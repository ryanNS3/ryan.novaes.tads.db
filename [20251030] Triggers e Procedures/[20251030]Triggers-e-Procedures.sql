-- Tabela de Vendas
CREATE TABLE VENDAS (
    id            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    produto       VARCHAR2(100) NOT NULL,
    categoria     VARCHAR2(50)  NOT NULL,
    valor         NUMBER(10,2)  NOT NULL CHECK (valor > 0),
    data_venda    DATE          DEFAULT SYSDATE,
    vendedor      VARCHAR2(100) NOT NULL
);

-- Tabela de Logs (para registrar todas as operações)
CREATE TABLE LOG_VENDAS (
    id            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    operacao      VARCHAR2(20)  NOT NULL,  -- INSERT, UPDATE, DELETE
    id_venda      NUMBER,
    produto       VARCHAR2(100),
    vendedor      VARCHAR2(100),
    valor         NUMBER(10,2),
    usuario       VARCHAR2(100) DEFAULT USER,
    data_hora     DATE          DEFAULT SYSDATE,
    observacao    VARCHAR2(500)
);

-- Inserir dados iniciais na tabela VENDAS
INSERT INTO VENDAS (produto, categoria, valor, data_venda, vendedor) 
VALUES 
    ('Notebook Dell', 'Eletrônicos', 4500.00, DATE '2025-04-01', 'Carlos'),
    ('Mouse Gamer', 'Acessórios', 150.00, DATE '2025-04-01', 'Ana'),
    ('Teclado Mecânico', 'Acessórios', 300.00, DATE '2025-04-02', 'Carlos'),
    ('Monitor 24"', 'Eletrônicos', 1200.00, DATE '2025-04-02', 'Bruna'),
    ('Fone Bluetooth', 'Acessórios', 200.00, DATE '2025-04-03', 'Ana'),
    ('Notebook HP', 'Eletrônicos', 4000.00, DATE '2025-04-03', 'Carlos'),
    ('Webcam HD', 'Acessórios', 180.00, DATE '2025-04-04', 'Bruna'),
    ('Carregador Portátil', 'Acessórios', 120.00, DATE '2025-04-04', 'Ana'),
    ('SSD 1TB', 'Componentes', 500.00, DATE '2025-04-05', 'Carlos'),
    ('Cabo HDMI', 'Acessórios', 50.00, DATE '2025-04-05', 'Bruna');

COMMIT;

-- Exercício 1
-- Crie uma trigger que também registre logs quando houver UPDATE na tabela VENDAS.


CREATE OR REPLACE TRIGGER trg_when_update
AFTER UPDATE ON VENDAS
FOR EACH ROW 
BEGIN 
    INSERT INTO LOG_VENDAS(
        operacao,
        id,
        produto,
        vendedor,
        valor,
        usuario,
        data_hora
    )
    VALUES(
        'INSERT',
        :NEW.id,
        :NEW.produto,
        :NEW.vendedor,
        :NEW.valor,
        USER,
        SYSDATE
    );
END;
/

UPDATE VENDAS 
SET VALOR = 100
WHERE VALOR = 150.00;


SELECT * FROM LOG_VENDAS;

-- Exercício 2
-- Crie uma procedure chamada total_vendas_vendedor que recebe o nome do vendedor e retorna o total de vendas realizadas por ele.

CREATE OR REPLACE PROCEDURE TOTAL_VENDEDOR(
    nome_vendedor IN VARCHAR2, 
    total_vendas OUT NUMBER
)
IS
BEGIN
    SELECT COUNT(*) AS TOTAL_VENDAS
    INTO total_vendas
    FROM  VENDAS
    WHERE VENDEDOR = nome_vendedor;
END TOTAL_VENDEDOR;
/
DECLARE
    v_total NUMBER;
BEGIN
    TOTAL_VENDEDOR('Carlos', v_total);
    DBMS_OUTPUT.PUT_LINE('Total de vendas de Carlos: ' || v_total);
END;
/

-- Exercício 3
-- Crie uma trigger BEFORE INSERT que valide se o valor da venda é maior que zero antes de permitir a inserção

CREATE OR REPLACE TRIGGER validar_valor_maior_zero
BEFORE UPDATE ON VENDAS
FOR EACH ROW 
BEGIN 
    INSERT INTO LOG_VENDAS(
        operacao,
        id,
        produto,
        vendedor,
        valor,
        usuario,
        data_hora
    )
    VALUES(
        'INSERT',
        :NEW.id,
        :NEW.produto,
        :NEW.vendedor,
        :NEW.valor,
        USER,
        SYSDATE
    );
END;
/

CREATE OR REPLACE TRIGGER validar_valor_maior_zero
BEFORE INSERT ON VENDAS
FOR EACH ROW
BEGIN
    -- Verifica se o valor informado é menor ou igual a zero
    IF :NEW.valor <= 0 THEN
        -- Gera erro personalizado e impede a inserção
        RAISE_APPLICATION_ERROR(-20001, 'O valor da venda deve ser maior que zero.');
    END IF;
END;
/
INSERT INTO VENDAS (produto, categoria, valor, data_venda, vendedor) 
VALUES 
    ('Notebook Dell', 'Eletrônicos', 0, DATE '2025-04-01', 'Carlos'),
    ('Mouse Gamer', 'Acessórios', 0, DATE '2025-04-01', 'Ana');